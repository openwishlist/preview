org: openwishlist
app: openwishlist-preview
service: openwishlist-preview
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  timeout: 30
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"

layers:
  HeadlessChrome:
    name: HeadlessChrome
    compatibleRuntimes:
      - nodejs16.x
    description: Required for headless chrome
    package:
      artifact: layers/chrome_aws_lambda.zip
      
functions:
  preview:
    handler: src/api/preview/get.get
    layers:
      - { Ref: HeadlessChromeLambdaLayer }
    events:
      - http:
          documentation: 
            summary: "Get product preview by url"
            methodResponses: 
              - statusCode: 200
                responseBody:
                  description: "A result object for the link"
                responseModels:
                  application/json: "GetLinkPreviewResponse"
            pathParams:
              - name: "url"
                description: "base64 encoded url"
                schema:
                  type: "string"
            queryParams:
              - name: "refresh"
                description: "Force re-fetch result"
                schema:
                  type: "boolean"
              - name: "browser"
                description: "Force fetch using browser"
                schema:
                  type: "boolean"
          path: /preview/{url}
          method: get
          cors: true
          throttling:
            maxRequestsPerSecond: 50
            maxConcurrentRequests: 20
  preview-get-by-id:
    handler: src/api/preview/get.getById
    layers:
      - { Ref: HeadlessChromeLambdaLayer }
    events:
      - http:
          documentation: 
            summary: "Get product by preview id"
            methodResponses: 
              - statusCode: 200
                responseBody:
                  description: "A result object for the link"
                responseModels:
                  application/json: "GetLinkPreviewResponse"
            pathParams:
              - name: "id"
                description: "uuid of product"
                schema:
                  type: "string"
          path: /preview/id/{id}
          method: get
          cors: true
          throttling:
            maxRequestsPerSecond: 50
            maxConcurrentRequests: 20

resources:
  Resources:
    PreviewDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: url
            AttributeType: S

          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: url
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: idIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-plugin-typescript
  - serverless-openapi-documenter
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-tscpaths
  - serverless-api-gateway-throttling
 
package:
  patterns:
    - 'spec/**'
    - 'config/**'

custom:
  apiGatewayThrottling:
    maxRequestsPerSecond: 50
    maxConcurrentRequests: 20
  documentation: ${file(spec/serverless.doc.yml):documentation}
  dynamodb:
    stages:
      - dev
    start:
      migrate: true